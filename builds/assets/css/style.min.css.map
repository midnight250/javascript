{"version":3,"sources":["style.css","style.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAiBA,KACC,YAAA,WAAA,CAAA,WAGD,WACC,iBAAA,QADD,uBCCC,YAAA,KA4DA,cAAA,ED3EC,eAAA,KCcF,aAAA,EDgDI,yBAhDJ,uBCfE,YAAA,MACA,cAAA,EACA,eAAA,MAiBA,aAAA,GAqCI,yBDzCN,mCAQI,QAAA,GCiCE,yBDzCN,+CCaK,SAAA,SAYA,MAAA,KDzBL,kECeM,SAAA,ODfN,wECuBO,MAAA,KDvBP,mFCqBQ,MAAA,MAoBF,yBDzCN,mEEgDI,QAAA,MFAA,0BAhDJ,mECmCO,aAAA,MAMD,cAAA,ODzCN,yEAAA,yECuCO,iBAAA,QDvCP,wEC2CM,OAAA,EACA,QAAA,EACA,iBAAA,QACA,cAAA,EDEF,yBAhDJ,wFCmDS,OAAA,eACA,QAAA,KAAA","file":"style.min.css","sourcesContent":["body {\n\tfont-family: 'Noto Sans', sans-serif;\n}\n\n.header-v1 {\n\tbackground-color: #dee2e6;\n}\n\n.header-v1 .header-top {\n\tpadding-top: 1rem;\n\tpadding-right: 0;\n\tpadding-bottom: 1rem;\n\tpadding-left: 0;\n}\n\n@media (max-width: 575px) {\n\t.header-v1 .header-top {\n\t\tpadding-top: 0.5rem;\n\t\tpadding-right: 0;\n\t\tpadding-bottom: 0.5rem;\n\t\tpadding-left: 0;\n\t}\n}\n\n@media (min-width: 992px) {\n\t.header-v1 .header-main .navbar-v1 {\n\t\tpadding: 0;\n\t}\n}\n\n@media (min-width: 992px) {\n\t.header-v1 .header-main .navbar-v1 .navbar-nav {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t}\n\t.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item.dropdown {\n\t\tposition: static;\n\t}\n\t.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .dropdown-menu {\n\t\twidth: 100%;\n\t}\n\t.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .dropdown-menu > .container {\n\t\twidth: 100%;\n\t}\n}\n\n@media (min-width: 992px) {\n\t.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .nav-link {\n\t\tpadding: 1rem;\n\t}\n}\n\n@media (max-width: 1199px) {\n\t.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .nav-link {\n\t\tpadding-left: 0.5rem;\n\t\tpadding-right: 0.5rem;\n\t}\n}\n\n.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .nav-link:hover, .header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .nav-link:focus {\n\tbackground-color: #dee2e6;\n}\n\n.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .dropdown-menu {\n\tmargin: 0;\n\tpadding: 0;\n\tbackground-color: #dee2e6;\n\tborder-radius: 0;\n}\n\n@media (max-width: 991px) {\n\t.header-v1 .header-main .navbar-v1 .navbar-nav .nav-item .dropdown-menu > .container > .row {\n\t\theight: auto !important;\n\t\tpadding: 1rem 0.5rem;\n\t}\n}\n","@import \"../../node_modules/bootstrap/scss/functions\";\r\n@import \"../sass-bootstrap/custom\";\r\n@import \"../../node_modules/bootstrap/scss/mixins\";\r\n\r\n@mixin padding($top, $right, $bottom, $left) {\r\n  padding-top: $top;\r\n  padding-right: $right;\r\n  padding-bottom: $bottom;\r\n  padding-left: $left;\r\n  @include media-breakpoint-down(xs) {\r\n  \tpadding-top: $top/2;\r\n    padding-right: $right/2;\r\n    padding-bottom: $bottom/2;\r\n    padding-left: $left/2;\r\n  }\r\n}\r\n\r\nbody{\r\n\tfont-family: 'Noto Sans', sans-serif;\r\n}\r\n\r\n.header-v1{\r\n\tbackground-color: $gray-300;\r\n\t.header-top{\r\n\t\t@include padding(1rem, 0, 1rem, 0);\r\n\t}\r\n\t.header-main{\r\n\t\t.navbar-v1{\r\n\t\t\t@include media-breakpoint-up(lg) {\r\n\t\t\t\tpadding: 0;\r\n\t\t\t}\r\n\t\t\t@include media-breakpoint-up(lg) {\r\n\t\t\t\t.navbar-nav{\r\n\t\t\t\t\tposition: relative;\r\n\t\t\t\t\twidth: 100%;\r\n\t\t\t\t\t.nav-item.dropdown{\r\n\t\t\t\t\t\tposition: static;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t.nav-item{\r\n\t\t\t\t\t\t.dropdown-menu{\r\n\t\t\t\t\t\t\twidth: 100%;\r\n\t\t\t\t\t\t\t> .container{\r\n\t\t\t\t\t\t\t\twidth: 100%;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t.navbar-nav{\r\n\t\t\t\t.nav-item{\r\n\t\t\t\t\t.nav-link{\r\n\t\t\t\t\t\t@include media-breakpoint-up(lg) {\r\n\t\t\t\t\t\t\tpadding: 1rem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t@include media-breakpoint-down(lg) {\r\n\t\t\t\t\t\t\tpadding-left: 0.5rem;\r\n\t\t\t\t\t\t\tpadding-right: 0.5rem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t&:hover,\r\n\t\t\t\t\t\t&:focus{\r\n\t\t\t\t\t\t\tbackground-color: $gray-300;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t.dropdown-menu{\r\n\t\t\t\t\t\tmargin: 0;\r\n\t\t\t\t\t\tpadding: 0;\r\n\t\t\t\t\t\tbackground-color: $gray-300;\r\n\t\t\t\t\t\tborder-radius: 0;\r\n\t\t\t\t\t\t> .container{\r\n\t\t\t\t\t\t\t> .row{\r\n\t\t\t\t\t\t\t\t// overwrite Javascript generated css\r\n\t\t\t\t\t\t\t\t@include media-breakpoint-down(md) {\r\n\t\t\t\t\t\t\t\t\theight: auto !important;\r\n\t\t\t\t\t\t\t\t\tpadding: 1rem 0.5rem;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.1.\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @media (min-width: $min) and (max-width: $max) {\n    @content;\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name)\n  } @else if $min == null {\n    @include media-breakpoint-down($name)\n  }\n}\n"]}